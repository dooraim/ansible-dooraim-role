# Config from Ansible

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

#
# Ansible managed
#

# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH=$HOME/.oh-my-zsh

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes
ZSH_THEME="powerlevel10k/powerlevel10k"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in ~/.oh-my-zsh/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to automatically update without prompting.
# DISABLE_UPDATE_PROMPT="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS=true

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# remove all alias for forgit
export FORGIT_NO_ALIASES=true

export FORGIT_FZF_DEFAULT_OPTS="
--exact
--cycle
--reverse
--height '80%'
"

# export FZF_DEFAULT_OPTS="
# --preview 'batcat --style=numbers --color=always {}'
# "
export FZF_DEFAULT_COMMAND='fdfind --type f --color=never --hidden'
export FZF_DEFAULT_OPTS='
--no-height
--color=bg+:#343d46,gutter:-1,pointer:#ff3c3c,info:#0dbc79,hl:#0dbc79,hl+:#23d18b
--preview "batcat --color=always --line-range :50 {}"
'

# f - open a file
f() {
  batcat $( fzf --reverse )
}

# fv - open a file in vi
fv() {
  vi $( fzf --reverse )
}

# fnv - open a file in nvim
fnv() {
  nvim $( fzf --reverse )
}

# fh - repeat history
fh() {
  eval $( ([ -n "$ZSH_NAME" ] && fc -l 1 || history) |\
  fzf +s --tac --reverse |\
  sed -E 's/ *[0-9]*\*? *//' |\
  sed -E 's/\\/\\\\/g')
}

# using ripgrep combined with preview
# find-in-file - usage: fif <searchTerm>
fif() {
  if [ ! "$#" -gt 0 ]; then echo "Need a string to search for!"; return 1; fi
  rg --files-with-matches --no-messages "$1" |\
  fzf --preview "highlight -O ansi -l {} 2> /dev/null |\
  rg --colors 'match:bg:yellow' --ignore-case --pretty --context 10 '$1' ||\
  rg --ignore-case --pretty --context 10 '$1' {}"\
  --reverse
}

# using ripgrep combined with preview
# find-in-file - usage: fif <searchTerm>
# open file in batcat
fifbc() {
  if [ ! "$#" -gt 0 ]; then echo "Need a string to search for!"; return 1; fi
  rg --files-with-matches --no-messages "$1" |\
  fzf --preview "highlight -O ansi -l {} 2> /dev/null |\
  rg --colors 'match:bg:yellow' --ignore-case --pretty --context 10 '$1' ||\
  rg --ignore-case --pretty --context 10 '$1' {}"\
  --reverse | xargs -n 1 batcat
}

# using ripgrep combined with preview
# find-in-file - usage: fif <searchTerm>
# open file in nvim
fifnv() {
  if [ ! "$#" -gt 0 ]; then echo "Need a string to search for!"; return 1; fi
  rg --files-with-matches --no-messages "$1" |\
  fzf --preview "highlight -O ansi -l {} 2> /dev/null |\
  rg --colors 'match:bg:yellow' --ignore-case --pretty --context 10 '$1' ||\
  rg --ignore-case --pretty --context 10 '$1' {}"\
  --reverse | xargs -n 1 nvim
}

# Which plugins would you like to load?
# Standard plugins can be found in ~/.oh-my-zsh/plugins/*
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(\
  git\
  zsh-autosuggestions\
  forgit\
  enhancd\
  zsh-syntax-highlighting\
  copyfile\
  dirhistory\
  colored-man-pages\
)

source $ZSH/oh-my-zsh.sh

# source ~/forgit_custom.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

#-------------------------------------------------------------
# GIT
#-------------------------------------------------------------

alias g="git status"
alias ga="git add"
alias gaa="git add ."
alias gau="git add -u"
alias gc="git commit -v"
alias gca="git commit -am"
alias gb="git branch -vv"
alias gbd="git branch -d"
alias gco="git checkout"
alias gcob="git checkout -b"
alias gt="git stash"
alias gta="git stash apply"
alias gm="git merge"
alias gr="git rebase"
alias gld="git log --pretty=format:'%Cred%h%Creset %C(cyan)%cd %C(yellow)%an%Creset %s' --date=format:'%Y-%m-%d %H:%M:%S'"
alias glog="git log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --"
alias glga="git log --graph --oneline --all --decorate"
alias gs="git show"
alias gd="git diff --color --color-words --abbrev"
alias gdc="git diff --cached"
alias gbl="git blame"
alias gps="git push"
alias gpl="git pull"
alias go="git checkout "
alias gk="gitk --all&"
alias gx="gitx --all"
alias gcl="git clone --recurse-submodules"
alias gbr="git branch -r"
alias gf="git fetch --all"
alias gmnf="git merge --no-ff"
alias gvdf='view_diff'
alias grv="git remote -v"
alias gra="git remote -a"
# vedo tutti i remote del repository
alias grs="git remote show"
# faccio il fetch di tutti i branch e vedo lo stato dei branch in termini di commit prima e dopo
alias gfabv="git fetch --all && git branch -vv"
# vedo quali commit non sono ancora stati pushati
alias glnp="git log --branches --not --remotes"
alias gclean="git remote prune"
alias grst="git restore --staged"
alias grsta="git restore --staged *"
alias glp="git log -p --"
alias glpb="git log --"


gdfb(){
  if ![ "$1" ]; then
    echo "Miss first branch"
  elif ![ "$2" ]; then
    echo "Miss second branch"
  elif ![ "$3" ]; then
    echo "Miss file name"
  else
    git diff $1..$2 -- $3
  fi
}

# show ignored files by git
alias gx="ign = ls-files -o -i --exclude-standard"

# Untrack Files without deleting them
alias grmc="git rm -r --cached"

# Pipe for update note
alias gupdate="git add . && git commit -m "update" && git push"

# Metod

alias gln='logging'

logging(){
  if [ "$1" ]; then
    git log --pretty=format:'%Cred%h%Creset %Cgreen(%cr)%Creset %C(yellow)%an%Creset %s' -n $1 --color=always | nl | less -r
  else
    git log --pretty=format:'%Cred%h%Creset %Cgreen(%cr)%Creset %C(yellow)%an%Creset %s' --color=always | nl | less -r
  fi

}

view_diff(){
  if [ "$1" ]; then
    git diff HEAD~$1..HEAD
  else
    git diff HEAD^..HEAD
  fi
}

batdiff() {
  git diff --name-only --relative --diff-filter=d | xargs batcat
}

#-------------------------------------------------------------
# FORGIT
#-------------------------------------------------------------

alias flog="forgit::log"
alias fcb="forgit::checkout::branch"
alias fclean="forgit::clean"
alias fss="forgit::stash::show"
alias fb="forgit::blame"

#-------------------------------------------------------------
# Command Directory
#-------------------------------------------------------------

alias ..='cd ..;pwd'
alias ...='cd ../..;pwd'
alias ....='cd ../../..;pwd'
alias c='clear'
alias h='history'
alias ll='ls -lah'
alias mkdir='mkdir -p -v'

#-------------------------------------------------------------
# YABT
#-------------------------------------------------------------

alias ybs="yabt step"
alias ybb="yabt build"
alias ybts="yabt shell"

#-------------------------------------------------------------
# LAB
#-------------------------------------------------------------

# issue
alias lic='lab issue create'
alias lie='lab issue edit'
alias licl='lab issue close'
alias lis='lab issue show'
alias lib='lab issue browse'
alias lin='lab issue note'
alias linm='lab issue note -m'
alias lil='lab issue list'

# mr
alias lmc='lab mr create'
alias lme='lab mr edit'
alias lmcl='lab mr close'
alias lms='lab mr show'
alias lmb='lab mr browse'
alias lmn='lab mr note'
alias lmn='lab mr note -m'
alias lil='lab mr list'

#-------------------------------------------------------------
# TMUX
#-------------------------------------------------------------
alias ts='tmux ls'
alias ta='tmux a -t'
alias tn='tmux new -s'

#-------------------------------------------------------------
# Bash
#-------------------------------------------------------------
alias bc='batcat'
alias cp='rsync --progress -avz --ignore-existing'
alias tree='tree -C --dirsfirst'
# This renames all files in the current directory containing a specific string with another string
alias rename='function _rename() { for i in *$1*; do mv "$i" "${i/$1/$2}"; done }; _rename'
# This shows all directories in the PATH variable, one per line.
alias path='echo -e ${PATH//:/\\n}'
# This updates and upgrades all the packages on the system using the apt package manager.
alias update='sudo apt-get update'
alias install='sudo apt-get install'
# This will show all files sorted by modification date, the most recent first.
alias lr='ls -ltr'
alias reload='source ~/.zshrc'
alias grep='grep --color=auto'
alias occupy='du . -hacS --apparent-size'
alias cshs='cht.sh --shell'
alias csh='curl cheat.sh/'

cheat(){
  if [ "$1" ]; then
    curl cheat.sh/$1 | less
  else 
    echo -e "Error\ncheat python\ncheat python/:learn\ncheat python/:list"
  fi
}

txtblk='\e[0;30m' # Black - Regular
txtred='\e[0;31m' # Red
txtgrn='\e[0;32m' # Green
txtylw='\e[0;33m' # Yellow
txtblu='\e[0;34m' # Blue
txtpur='\e[0;35m' # Purple
txtcyn='\e[0;36m' # Cyan
txtwht='\e[0;37m' # White

txtblkbold='\e[1;30m' # Bold Black - Regular
txtredbold='\e[1;31m' # Bold Red
txtgrnbold='\e[1;32m' # Bold Green
txtylwbold='\e[1;33m' # Bold Yellow
txtblubold='\e[1;34m' # Bold Blue
txtpurbold='\e[1;35m' # Bold Purple
txtcynbold='\e[1;36m' # Bold Cyan
txtwhtbold='\e[1;37m' # Bold White
txtresbold='\e[0;0m' # Bold Reset

helpme() {

#  echo -e "${txtredbold}title${txtresbold}"
#  echo -e "${txtgrnbold}subtitle${txtresbold}"
#  echo -e "${txtblubold}args${txtresbold}"

  echo -e "${txtredbold}HELP ME!!!${txtresbold}\n"

  echo -e "* ${txtgrnbold}fzf${txtresbold}\n"

  echo -e "** ${txtblubold}f${txtresbold} -> search a file with fzf and open with batcat"
  echo -e "** ${txtblubold}fv${txtresbold} -> search a file with fzf and open with vi"
  echo -e "** ${txtblubold}fnv${txtresbold} -> search a file with fzf and open with nvim"
  echo -e "** ${txtblubold}fh${txtresbold} -> search a command in history with fzf"
  echo -e "** ${txtblubold}fif${txtresbold} -> search a word in file with fzf"
  echo -e "** ${txtblubold}fifbc${txtresbold} -> search a word in file and open file with batcat"
  echo -e "** ${txtblubold}fifnv${txtresbold} -> search a word in file and open file with nvim"


  echo -e "\n"

  echo -e "* ${txtgrnbold}forgit${txtresbold}\n"

  echo -e "** ${txtblubold}flog${txtresbold} -> git log with forgit"
  echo -e "** ${txtblubold}fcb${txtresbold} -> git checkout branch with forgit"
  echo -e "** ${txtblubold}fclean${txtresbold} -> git clean with forgit"
  echo -e "** ${txtblubold}fss${txtresbold} -> git stash show with forgit"
  echo -e "** ${txtblubold}fb${txtresbold} -> git blame with forgit"

  echo -e "\n"

  echo -e "* ${txtgrnbold}cheat.sh${txtresbold}\n"

  echo -e "** ${txtblubold}cheat${txtresbold} -> helper for command in Linux"
  echo -e "csh python\ncsh python/:learn\ncsh python/:list"

  echo -e "\n"

  echo -e "* ${txtgrnbold}Utility${txtresbold}\n"

  echo -e "** ${txtblubold}occupy${txtresbold} -> size of directory and sub-directory"

  echo -e "** Ctrl+O copies the text to the clipboard"
  echo -e "** Alt+Left takes you into the previous directory you were in"
  echo -e "** Alt+Right reverts that (moves you forward)"
  echo -e "** Alt+up puts you in the parent directory"
  echo -e "** "
  echo -e "** "
  echo -e "** "
  echo -e "** "
  echo -e "** "


}

helpmegit() {

  echo -e "${txtredbold}HELP ME GIT!!!${txtresbold}\n"

  echo -e "* g → git status"
  echo -e "* ga → git add"
  echo -e "* gaa → git add ."
  echo -e "* gau → git add -u"
  echo -e "* gc → git commit -v"
  echo -e "* gca → git commit -am"
  echo -e "* gb → git branch -vv"
  echo -e "* gbd → git branch -d"
  echo -e "* gco → git checkout"
  echo -e "* gcob → git checkout -b"
  echo -e "* gt → git stash"
  echo -e "* gta → git stash apply"
  echo -e "* gm → git merge"
  echo -e "* gr → git rebase"
  echo -e "* gld → git log --pretty=format:'%Cred%h%Creset %C(cyan)%cd %C(yellow)%an%Creset %s' --date=format:'%Y-%m-%d %H:%M:%S'"
  echo -e "* glog → git log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --"
  echo -e "* glga → git log --graph --oneline --all --decorate"
  echo -e "* gs → git show"
  echo -e "* gd → git diff --color --color-words --abbrev"
  echo -e "* gdc → git diff --cached"
  echo -e "* gbl → git blame"
  echo -e "* gps → git push"
  echo -e "* gpl → git pull"
  echo -e "* go → git checkout "
  echo -e "* gk → gitk --all&"
  echo -e "* gx → gitx --all"
  echo -e "* gcl → git clone --recurse-submodules"
  echo -e "* gbr → git branch -r"
  echo -e "* gf → git fetch --all"
  echo -e "* gmnf → git merge --no-ff"
  echo -e "* gvdf → view_diff"
  echo -e "* grv → git remote -v"
  echo -e "* gra → git remote -a"
  echo -e "* grs → git remote show"
  echo -e "* gfabv → git fetch --all && git branch -vv"
  echo -e "* glnp → git log --branches --not --remotes"
  echo -e "* gclean → git remote prune"
  echo -e "* grst → git restore --staged"
  echo -e "* grsta → git restore --staged *"
  echo -e "* glp → git log -p -- <name file>"
  echo -e "* glpb → git log -- <name file> <name branch>"
  echo -e "* gdfb →  git diff <first branch>..<second branch> -- <file name>"

}

helpmetmux() {

  echo -e "${txtredbold}HELP ME TMUX!!!${txtresbold}\n"


    echo -e "* tmux → start tmux"
    echo -e "* tmux new -s name → start tmux with name"
    echo -e "* tmux ls → shows the list of sessions"
    echo -e "* tmux a # → attach the detached-session"
    echo -e "* tmux a -t name → attach the detached-session to name"
    echo -e "* tmux kill-session –t name or ctrl+b :kill-session → kill the session name"
    echo -e "* tmux kill-server → kill the tmux server"
    echo -e "* w → list windows and select one"
    echo -e "* , → rename window"
    echo -e "* c or N → create new window"
    echo -e "* n → go to next window"
    echo -e "* p → go to previous window"
    echo -e "* f → find window"
    echo -e "* & → kill window"
    echo -e "* 0-9 → go to window 0-9"
    echo -e "* x → close pane"
    echo -e "* shift + sx mouse → select"
    echo -e "* shift + ctrl + c → copy"
    echo -e "* | → divide la pagina in verticale"
    echo -e "* - → divide la pagina in orizzontale"
    echo -e "* k → sposta la pagina verso l'alto"
    echo -e "* j → sposta la pagina verso il basso"
    echo -e "* l → sposta la pagina verso dx"
    echo -e "* h → sposta la pagina verso sx"
}

pokemon-colorscripts -r -b --no-title

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh
